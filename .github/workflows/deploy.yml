name: Deploy to AWS Lightsail

on:
  push:
    branches:
      - main

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      # Create a deployment package
      - name: Create deployment package
        run: |
          mkdir -p deployment/backend
          cd back-end
          cp -r config/* ../deployment/backend/
          cp -r utils/* ../deployment/backend/
          cp -r server.js ../deployment/backend/
          cp -r package.json ../deployment/backend/
          cp -r ecosystem.config.js ../deployment/backend/
          mkdir -p ../deployment/frontend
          cd ../front-end
          cp -r public/* ../deployment/frontend/
          cp -r src/* ../deployment/frontend/
          cp -r eslint.config.js ../deployment/frontend/
          cp -r index.html ../deployment/frontend/
          cp -r package.json ../deployment/frontend/
          cp -r postcss.config.js ../deployment/frontend/
          cp -r tailwind.config.js ../deployment/frontend/
          cp -r tsconfig*.json ../deployment/frontend/
          cp -r vite.config.ts ../deployment/frontend/
          
      - name: Create SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.LIGHTSAIL_PRIVATE_KEY }}" > ~/.ssh/lightsail.pem
          chmod 600 ~/.ssh/lightsail.pem
          
      - name: Add host key to known_hosts
        run: |
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts
          
      - name: Archive deployment
        run: |
          # Compress deployment package
          tar -czf deployment.tar.gz -C deployment .
          
      - name: Upload files to server
        run: |
          # Upload deployment files
          scp -i ~/.ssh/lightsail.pem deployment.tar.gz ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/tmp/
          
          # Extract and setup on server
          ssh -i ~/.ssh/lightsail.pem ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
            # Stop existing pm2 processes
            cd /opt/bitnami/projects/coinpurse/back-end
            npm run stop
            cd ..            
            
            # Extract new deployment
            sudo tar -xzf /tmp/deployment.tar.gz -C .
            
            # Replace backend files
            mv deployment/backend/* back-end/

            # Replace frontend files
            mv deployment/frontend/* front-end/
            
            # Reinstall dependencies
            cd back-end
            rm -rf node_modules package-lock.json
            npm install --production
            cd ..

            cd front-end
            rm -rf node_modules package-lock.json
            npm install --production

            # Start pm2
            cd ../back-end
            npm run start
            
            # Clean up
            cd ..
            rm -rf deployment
            rm /tmp/deployment.tar.gz
          EOF

      - name: Cleanup
        run: rm -rf ~/.ssh/lightsail.pem 